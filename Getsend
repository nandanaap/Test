public List<amsmast> b18f_getmailtype(DateTime pd_date)
{
    List<amsmast> lo_amsmasts = new();
    string lc_sql;
    dblib lo_dblib = new();
    DataSet lds;
    string lc_period;
    string lc_spday;
    bool lb_takeme;
    int li_today;
    int li_weekday;
    string lc_amscode;

    DataSet lds1;
    li_today = pd_date.Day;
    li_weekday = (int)pd_date.DayOfWeek;
    lc_sql = "select x471_amscode, x471_period, x471_spday from x471 " +
             "where x471_mailtype='A' ";
    lds = lo_dblib.appds(lc_sql);
    
    foreach (DataRow lo_row in lds.Tables[0].Rows)
    {
        lb_takeme = false;
        lc_period = lo_row["x471_period"].ToString();
        lc_spday = lo_row["x471_spday"].ToString();
        lc_amscode = lo_row["x471_amscode"].ToString();
        
        // Parse special days from comma-separated string
        var spval = lc_spday.Split(',').Select(day => int.Parse(day.Trim())).ToList();
        
        if (lc_period == "M")
        {
            if (spval.Contains(li_today)) lb_takeme = true;
        }
        else if (lc_period == "W")
        {
            if (spval.Contains(li_weekday)) lb_takeme = true;
        }
        
        if (lb_takeme == false) goto b18f_next;

        //********* 
        //*** Check if email has already been sent today for this amscode
        //********* 
        lc_sql = "Select * from x473 where " +
                 "( x473_amscode = '" + lc_amscode + "' ) and " +
                 "( CAST(x473_date AS DATE) = CAST('" + pd_date.ToString("yyyy-MM-dd") + "' AS DATE) )";
        lds1 = lo_dblib.appds(lc_sql);
        
        if (lo_dblib.hasdata(ref lds1) == true)
        {
            // Email already sent today for this amscode, skip it
            goto b18f_next;
        }

        // Email has not been sent today, proceed to send
        if (lb_takeme == true)
        {
            // Send the email first
            bool emailSent = SendEmailForAmscode(lc_amscode, pd_date);
            
            if (emailSent)
            {
                // Log the email send to x473 table to prevent duplicates
                LogEmailSent(lc_amscode, pd_date);
                
                // Add to the collection
                amsmast lo_amsmast = new amsmast();
                lo_amsmast.getcode(lc_amscode);
                lo_amsmasts.Add(lo_amsmast);
            }
        }

        b18f_next:
        ;
    }
    
    return lo_amsmasts;
}

private bool SendEmailForAmscode(string amscode, DateTime sentDate)
{
    try
    {
        // Add your email sending logic here
        // Get email configuration for this amscode
        string sql = "SELECT recipient_email, subject, message_body FROM email_config WHERE amscode = '" + amscode + "'";
        dblib lo_dblib = new dblib();
        DataSet emailConfig = lo_dblib.appds(sql);
        
        if (!lo_dblib.hasdata(ref emailConfig))
        {
            Console.WriteLine($"No email configuration found for amscode: {amscode}");
            return false;
        }
        
        DataRow emailRow = emailConfig.Tables[0].Rows[0];
        string recipientEmail = emailRow["recipient_email"].ToString();
        string subject = emailRow["subject"].ToString();
        string messageBody = emailRow["message_body"].ToString();
        
        // Send email using SMTP
        using (SmtpClient smtpClient = new SmtpClient("smtp.gmail.com", 587))
        {
            smtpClient.Credentials = new NetworkCredential("your-email@gmail.com", "your-app-password");
            smtpClient.EnableSsl = true;
            
            using (MailMessage message = new MailMessage())
            {
                message.From = new MailAddress("your-email@gmail.com");
                message.To.Add(recipientEmail);
                message.Subject = subject;
                message.Body = messageBody;
                message.IsBodyHtml = false;
                
                smtpClient.Send(message);
                Console.WriteLine($"Email sent successfully for amscode: {amscode}");
                return true;
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Failed to send email for amscode {amscode}: {ex.Message}");
        return false;
    }
}

private void LogEmailSent(string amscode, DateTime sentDate)
{
    try
    {
        // Insert record into x473 table to track email sent
        string sql = "INSERT INTO x473 (x473_amscode, x473_date) VALUES ('" + 
                     amscode + "', '" + sentDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
        dblib lo_dblib = new dblib();
        lo_dblib.runbatch(sql);
        
        Console.WriteLine($"Email send logged for amscode: {amscode}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Failed to log email for amscode {amscode}: {ex.Message}");
    }
}
